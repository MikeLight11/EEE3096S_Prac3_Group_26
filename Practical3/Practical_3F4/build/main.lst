ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.global	start_time
  21              		.section	.bss.start_time,"aw",%nobits
  22              		.align	2
  25              	start_time:
  26 0000 00000000 		.space	4
  27              		.global	end_time
  28              		.section	.bss.end_time,"aw",%nobits
  29              		.align	2
  32              	end_time:
  33 0000 00000000 		.space	4
  34              		.global	execution_time
  35              		.section	.bss.execution_time,"aw",%nobits
  36              		.align	2
  39              	execution_time:
  40 0000 00000000 		.space	4
  41              		.global	checksum
  42              		.section	.bss.checksum,"aw",%nobits
  43              		.align	3
  46              	checksum:
  47 0000 00000000 		.space	8
  47      00000000 
  48              		.global	start_cycles
  49              		.section	.bss.start_cycles,"aw",%nobits
  50              		.align	2
  53              	start_cycles:
  54 0000 00000000 		.space	4
  55              		.global	end_cycles
  56              		.section	.bss.end_cycles,"aw",%nobits
  57              		.align	2
  60              	end_cycles:
  61 0000 00000000 		.space	4
  62              		.global	CPU_cycles
  63              		.section	.bss.CPU_cycles,"aw",%nobits
  64              		.align	2
  67              	CPU_cycles:
  68 0000 00000000 		.space	4
  69              		.global	throughput
  70              		.section	.bss.throughput,"aw",%nobits
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 2


  71              		.align	2
  74              	throughput:
  75 0000 00000000 		.space	4
  76              		.global	init_width
  77              		.section	.data.init_width,"aw"
  78              		.align	2
  81              	init_width:
  82 0000 80000000 		.word	128
  83              		.global	init_height
  84              		.section	.data.init_height,"aw"
  85              		.align	2
  88              	init_height:
  89 0000 80000000 		.word	128
  90              		.global	size_array
  91              		.section	.data.size_array,"aw"
  92              		.align	2
  95              	size_array:
  96 0000 80000000 		.word	128
  97 0004 A0000000 		.word	160
  98 0008 C0000000 		.word	192
  99 000c E0000000 		.word	224
 100 0010 00010000 		.word	256
 101              		.global	checksum_array
 102              		.section	.bss.checksum_array,"aw",%nobits
 103              		.align	3
 106              	checksum_array:
 107 0000 00000000 		.space	40
 107      00000000 
 107      00000000 
 107      00000000 
 107      00000000 
 108              		.global	execution_time_array
 109              		.section	.bss.execution_time_array,"aw",%nobits
 110              		.align	2
 113              	execution_time_array:
 114 0000 00000000 		.space	20
 114      00000000 
 114      00000000 
 114      00000000 
 114      00000000 
 115              		.global	CPU_cycles_array
 116              		.section	.bss.CPU_cycles_array,"aw",%nobits
 117              		.align	2
 120              	CPU_cycles_array:
 121 0000 00000000 		.space	20
 121      00000000 
 121      00000000 
 121      00000000 
 121      00000000 
 122              		.global	CPU_time_array
 123              		.section	.bss.CPU_time_array,"aw",%nobits
 124              		.align	2
 127              	CPU_time_array:
 128 0000 00000000 		.space	20
 128      00000000 
 128      00000000 
 128      00000000 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 3


 128      00000000 
 129              		.global	throughput_array
 130              		.section	.bss.throughput_array,"aw",%nobits
 131              		.align	2
 134              	throughput_array:
 135 0000 00000000 		.space	20
 135      00000000 
 135      00000000 
 135      00000000 
 135      00000000 
 136              		.global	__aeabi_ui2d
 137              		.global	__aeabi_ddiv
 138              		.global	__aeabi_d2f
 139              		.section	.text.main,"ax",%progbits
 140              		.align	1
 141              		.global	main
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 146              	main:
 147              	.LFB159:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include <stdio.h>
  22:Core/Src/main.c **** #include <sys/time.h>
  23:Core/Src/main.c **** #include <time.h>
  24:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* USER CODE END Includes */
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  31:Core/Src/main.c **** #define MAX_ITER 100
  32:Core/Src/main.c **** /* USER CODE END PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PD */
  36:Core/Src/main.c **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 4


  37:Core/Src/main.c **** /* USER CODE END PD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* USER CODE END PM */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE BEGIN PV */
  47:Core/Src/main.c **** //TODO: Define variables you think you might need
  48:Core/Src/main.c **** // - Performance timing variables (e.g execution time, throughput, pixels per second, clock cycles)
  49:Core/Src/main.c **** uint32_t start_time;       // Clock time at start of operation
  50:Core/Src/main.c **** uint32_t end_time;         // Clock time at end of operation
  51:Core/Src/main.c **** uint32_t execution_time;   // Difference between start and end time
  52:Core/Src/main.c **** uint64_t checksum;         // Sum returned by Mandelbrot function
  53:Core/Src/main.c **** uint32_t start_cycles;     // Cycles at start of operation
  54:Core/Src/main.c **** uint32_t end_cycles;       // Cycles at end of operation
  55:Core/Src/main.c **** uint32_t CPU_cycles;       // Difference between start and end cycles
  56:Core/Src/main.c **** uint32_t throughput;       // Pixel throughput
  57:Core/Src/main.c **** int init_width = 128;            // Initial height of 2D plane
  58:Core/Src/main.c **** int init_height = 128;           // Initial width of 2D plane
  59:Core/Src/main.c **** int size_array[] = {128, 160, 192, 224, 256};
  60:Core/Src/main.c **** uint64_t checksum_array[5] = {0}; // Array to hold checksums for different sizes
  61:Core/Src/main.c **** uint32_t execution_time_array[5] = {0}; // Array to hold execution times for different sizes
  62:Core/Src/main.c **** uint32_t CPU_cycles_array[5]={0};
  63:Core/Src/main.c **** float CPU_time_array[5]={0};
  64:Core/Src/main.c **** uint32_t throughput_array[5]={0};
  65:Core/Src/main.c **** /* USER CODE END PV */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  68:Core/Src/main.c **** void SystemClock_Config(void);
  69:Core/Src/main.c **** static void MX_GPIO_Init(void);
  70:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  71:Core/Src/main.c **** //TODO: Define any function prototypes you might need such as the calculate Mandelbrot function amo
  72:Core/Src/main.c **** uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations);
  73:Core/Src/main.c **** uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations);
  74:Core/Src/main.c **** uint64_t calculate_mandelbrot_float(int width, int height, int max_iterations);
  75:Core/Src/main.c **** void DWT_Init(void);
  76:Core/Src/main.c **** /* USER CODE END PFP */
  77:Core/Src/main.c **** 
  78:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  79:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** /* USER CODE END 0 */
  82:Core/Src/main.c **** 
  83:Core/Src/main.c **** /**
  84:Core/Src/main.c ****   * @brief  The application entry point.
  85:Core/Src/main.c ****   * @retval int
  86:Core/Src/main.c ****   */
  87:Core/Src/main.c **** int main(void)
  88:Core/Src/main.c **** {
 148              		.loc 1 88 1
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 8
 151              		@ frame_needed = 1, uses_anonymous_args = 0
 152 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 5


 153              	.LCFI0:
 154              		.cfi_def_cfa_offset 8
 155              		.cfi_offset 7, -8
 156              		.cfi_offset 14, -4
 157 0002 82B0     		sub	sp, sp, #8
 158              	.LCFI1:
 159              		.cfi_def_cfa_offset 16
 160 0004 00AF     		add	r7, sp, #0
 161              	.LCFI2:
 162              		.cfi_def_cfa_register 7
  89:Core/Src/main.c **** 
  90:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* USER CODE END 1 */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  97:Core/Src/main.c ****   HAL_Init();
 163              		.loc 1 97 3
 164 0006 FFF7FEFF 		bl	HAL_Init
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 100:Core/Src/main.c **** 
 101:Core/Src/main.c ****   /* USER CODE END Init */
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****   /* Configure the system clock */
 104:Core/Src/main.c ****   SystemClock_Config();
 165              		.loc 1 104 3
 166 000a FFF7FEFF 		bl	SystemClock_Config
 105:Core/Src/main.c **** 
 106:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   /* USER CODE END SysInit */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   /* Initialize all configured peripherals */
 111:Core/Src/main.c ****   MX_GPIO_Init();
 167              		.loc 1 111 3
 168 000e FFF7FEFF 		bl	MX_GPIO_Init
 112:Core/Src/main.c ****   DWT_Init();
 169              		.loc 1 112 3
 170 0012 FFF7FEFF 		bl	DWT_Init
 171              	.LBB4:
 113:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 114:Core/Src/main.c **** 
 115:Core/Src/main.c ****   /* USER CODE END 2 */
 116:Core/Src/main.c ****   for (int i = 0; i < 5; i++) {
 172              		.loc 1 116 12
 173 0016 0023     		movs	r3, #0
 174 0018 7B60     		str	r3, [r7, #4]
 175              		.loc 1 116 3
 176 001a 86E0     		b	.L2
 177              	.L3:
 117:Core/Src/main.c ****           //TODO: Turn on LED 0 to signify the start of the operation
 118:Core/Src/main.c ****           HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 178              		.loc 1 118 11
 179 001c 0122     		movs	r2, #1
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 6


 180 001e 0121     		movs	r1, #1
 181 0020 4748     		ldr	r0, .L5+8
 182 0022 FFF7FEFF 		bl	HAL_GPIO_WritePin
 119:Core/Src/main.c **** 
 120:Core/Src/main.c ****           start_time = HAL_GetTick();
 183              		.loc 1 120 24
 184 0026 FFF7FEFF 		bl	HAL_GetTick
 185 002a 0346     		mov	r3, r0
 186              		.loc 1 120 22 discriminator 1
 187 002c 454A     		ldr	r2, .L5+12
 188 002e 1360     		str	r3, [r2]
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****           DWT->CYCCNT = 0;
 189              		.loc 1 122 14
 190 0030 454B     		ldr	r3, .L5+16
 191              		.loc 1 122 23
 192 0032 0022     		movs	r2, #0
 193 0034 5A60     		str	r2, [r3, #4]
 123:Core/Src/main.c ****           start_cycles = DWT->CYCCNT;
 194              		.loc 1 123 29
 195 0036 444B     		ldr	r3, .L5+16
 196 0038 5B68     		ldr	r3, [r3, #4]
 197              		.loc 1 123 24
 198 003a 444A     		ldr	r2, .L5+20
 199 003c 1360     		str	r3, [r2]
 124:Core/Src/main.c **** 
 125:Core/Src/main.c ****           checksum_array[i] = calculate_mandelbrot_fixed_point_arithmetic(size_array[i], size_array
 200              		.loc 1 125 31
 201 003e 444A     		ldr	r2, .L5+24
 202 0040 7B68     		ldr	r3, [r7, #4]
 203 0042 52F82300 		ldr	r0, [r2, r3, lsl #2]
 204 0046 424A     		ldr	r2, .L5+24
 205 0048 7B68     		ldr	r3, [r7, #4]
 206 004a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 207 004e 6422     		movs	r2, #100
 208 0050 1946     		mov	r1, r3
 209 0052 FFF7FEFF 		bl	calculate_mandelbrot_fixed_point_arithmetic
 210 0056 0246     		mov	r2, r0
 211 0058 0B46     		mov	r3, r1
 212              		.loc 1 125 29 discriminator 1
 213 005a 3E48     		ldr	r0, .L5+28
 214 005c 7968     		ldr	r1, [r7, #4]
 215 005e C900     		lsls	r1, r1, #3
 216 0060 0144     		add	r1, r1, r0
 217 0062 C1E90023 		strd	r2, [r1]
 126:Core/Src/main.c ****           //checksum_array[i] = calculate_mandelbrot_double(size_array[i], size_array[i], MAX_ITER)
 127:Core/Src/main.c ****           //checksum_array[i] = calculate_mandelbrot_float(size_array[i], size_array[i], MAX_ITER);
 128:Core/Src/main.c **** 
 129:Core/Src/main.c ****           end_time = HAL_GetTick();
 218              		.loc 1 129 22
 219 0066 FFF7FEFF 		bl	HAL_GetTick
 220 006a 0346     		mov	r3, r0
 221              		.loc 1 129 20 discriminator 1
 222 006c 3A4A     		ldr	r2, .L5+32
 223 006e 1360     		str	r3, [r2]
 130:Core/Src/main.c ****           execution_time_array[i] = end_time - start_time;
 224              		.loc 1 130 46
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 7


 225 0070 394B     		ldr	r3, .L5+32
 226 0072 1A68     		ldr	r2, [r3]
 227 0074 334B     		ldr	r3, .L5+12
 228 0076 1B68     		ldr	r3, [r3]
 229 0078 D21A     		subs	r2, r2, r3
 230              		.loc 1 130 35
 231 007a 3849     		ldr	r1, .L5+36
 232 007c 7B68     		ldr	r3, [r7, #4]
 233 007e 41F82320 		str	r2, [r1, r3, lsl #2]
 131:Core/Src/main.c **** 
 132:Core/Src/main.c ****           end_cycles = DWT->CYCCNT;
 234              		.loc 1 132 27
 235 0082 314B     		ldr	r3, .L5+16
 236 0084 5B68     		ldr	r3, [r3, #4]
 237              		.loc 1 132 22
 238 0086 364A     		ldr	r2, .L5+40
 239 0088 1360     		str	r3, [r2]
 133:Core/Src/main.c ****           CPU_cycles_array[i] = end_cycles - start_cycles;
 240              		.loc 1 133 44
 241 008a 354B     		ldr	r3, .L5+40
 242 008c 1A68     		ldr	r2, [r3]
 243 008e 2F4B     		ldr	r3, .L5+20
 244 0090 1B68     		ldr	r3, [r3]
 245 0092 D21A     		subs	r2, r2, r3
 246              		.loc 1 133 31
 247 0094 3349     		ldr	r1, .L5+44
 248 0096 7B68     		ldr	r3, [r7, #4]
 249 0098 41F82320 		str	r2, [r1, r3, lsl #2]
 134:Core/Src/main.c ****           CPU_time_array[i] = CPU_cycles_array[i] / (120*(1e6));
 250              		.loc 1 134 47
 251 009c 314A     		ldr	r2, .L5+44
 252 009e 7B68     		ldr	r3, [r7, #4]
 253 00a0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 254              		.loc 1 134 51
 255 00a4 1846     		mov	r0, r3
 256 00a6 FFF7FEFF 		bl	__aeabi_ui2d
 257 00aa 23A3     		adr	r3, .L5
 258 00ac D3E90023 		ldrd	r2, [r3]
 259 00b0 FFF7FEFF 		bl	__aeabi_ddiv
 260 00b4 0246     		mov	r2, r0
 261 00b6 0B46     		mov	r3, r1
 262 00b8 1046     		mov	r0, r2
 263 00ba 1946     		mov	r1, r3
 264 00bc FFF7FEFF 		bl	__aeabi_d2f
 265 00c0 0246     		mov	r2, r0	@ float
 266              		.loc 1 134 29
 267 00c2 2949     		ldr	r1, .L5+48
 268 00c4 7B68     		ldr	r3, [r7, #4]
 269 00c6 9B00     		lsls	r3, r3, #2
 270 00c8 0B44     		add	r3, r3, r1
 271 00ca 1A60     		str	r2, [r3]	@ float
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****           throughput_array[i] = (size_array[i]*size_array[i]) / CPU_time_array[i];
 272              		.loc 1 136 44
 273 00cc 204A     		ldr	r2, .L5+24
 274 00ce 7B68     		ldr	r3, [r7, #4]
 275 00d0 52F82330 		ldr	r3, [r2, r3, lsl #2]
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 8


 276              		.loc 1 136 58
 277 00d4 1E49     		ldr	r1, .L5+24
 278 00d6 7A68     		ldr	r2, [r7, #4]
 279 00d8 51F82220 		ldr	r2, [r1, r2, lsl #2]
 280              		.loc 1 136 47
 281 00dc 02FB03F3 		mul	r3, r2, r3
 282              		.loc 1 136 63
 283 00e0 07EE903A 		vmov	s15, r3	@ int
 284 00e4 F8EEE76A 		vcvt.f32.s32	s13, s15
 285              		.loc 1 136 79
 286 00e8 1F4A     		ldr	r2, .L5+48
 287 00ea 7B68     		ldr	r3, [r7, #4]
 288 00ec 9B00     		lsls	r3, r3, #2
 289 00ee 1344     		add	r3, r3, r2
 290 00f0 93ED007A 		vldr.32	s14, [r3]
 291              		.loc 1 136 63
 292 00f4 C6EE877A 		vdiv.f32	s15, s13, s14
 293              		.loc 1 136 31
 294 00f8 FCEEE77A 		vcvt.u32.f32	s15, s15
 295 00fc 17EE901A 		vmov	r1, s15	@ int
 296 0100 1A4A     		ldr	r2, .L5+52
 297 0102 7B68     		ldr	r3, [r7, #4]
 298 0104 42F82310 		str	r1, [r2, r3, lsl #2]
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****           //TODO: Turn on LED 1 to signify the end of the operation
 139:Core/Src/main.c ****           HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 299              		.loc 1 139 11
 300 0108 0122     		movs	r2, #1
 301 010a 0221     		movs	r1, #2
 302 010c 0C48     		ldr	r0, .L5+8
 303 010e FFF7FEFF 		bl	HAL_GPIO_WritePin
 140:Core/Src/main.c **** 
 141:Core/Src/main.c ****           //TODO: Hold the LEDs on for a 1s delay
 142:Core/Src/main.c ****           HAL_Delay(1000);
 304              		.loc 1 142 11
 305 0112 4FF47A70 		mov	r0, #1000
 306 0116 FFF7FEFF 		bl	HAL_Delay
 143:Core/Src/main.c **** 
 144:Core/Src/main.c ****           //TODO: Turn off the LEDs
 145:Core/Src/main.c ****           HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 307              		.loc 1 145 11
 308 011a 0022     		movs	r2, #0
 309 011c 0321     		movs	r1, #3
 310 011e 0848     		ldr	r0, .L5+8
 311 0120 FFF7FEFF 		bl	HAL_GPIO_WritePin
 116:Core/Src/main.c ****           //TODO: Turn on LED 0 to signify the start of the operation
 312              		.loc 1 116 27 discriminator 3
 313 0124 7B68     		ldr	r3, [r7, #4]
 314 0126 0133     		adds	r3, r3, #1
 315 0128 7B60     		str	r3, [r7, #4]
 316              	.L2:
 116:Core/Src/main.c ****           //TODO: Turn on LED 0 to signify the start of the operation
 317              		.loc 1 116 21 discriminator 1
 318 012a 7B68     		ldr	r3, [r7, #4]
 319 012c 042B     		cmp	r3, #4
 320 012e 7FF775AF 		ble	.L3
 321              	.L4:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 9


 322              	.LBE4:
 146:Core/Src/main.c ****       }
 147:Core/Src/main.c **** 
 148:Core/Src/main.c ****   /* Infinite loop */
 149:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 150:Core/Src/main.c ****   while (1)
 323              		.loc 1 150 9
 324 0132 00BF     		nop
 325 0134 FDE7     		b	.L4
 326              	.L6:
 327 0136 00BF     		.align	3
 328              	.L5:
 329 0138 00000000 		.word	0
 330 013c 389C9C41 		.word	1100782648
 331 0140 00040240 		.word	1073873920
 332 0144 00000000 		.word	start_time
 333 0148 001000E0 		.word	-536866816
 334 014c 00000000 		.word	start_cycles
 335 0150 00000000 		.word	size_array
 336 0154 00000000 		.word	checksum_array
 337 0158 00000000 		.word	end_time
 338 015c 00000000 		.word	execution_time_array
 339 0160 00000000 		.word	end_cycles
 340 0164 00000000 		.word	CPU_cycles_array
 341 0168 00000000 		.word	CPU_time_array
 342 016c 00000000 		.word	throughput_array
 343              		.cfi_endproc
 344              	.LFE159:
 346              		.section	.text.SystemClock_Config,"ax",%progbits
 347              		.align	1
 348              		.global	SystemClock_Config
 349              		.syntax unified
 350              		.thumb
 351              		.thumb_func
 353              	SystemClock_Config:
 354              	.LFB160:
 151:Core/Src/main.c ****   {
 152:Core/Src/main.c ****     /* USER CODE END WHILE */
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 155:Core/Src/main.c **** 	  //TODO: Visual indicator: Turn on LED0 to signal processing start
 156:Core/Src/main.c **** 
 157:Core/Src/main.c **** 
 158:Core/Src/main.c **** 	  //TODO: Benchmark and Profile Performance
 159:Core/Src/main.c **** 
 160:Core/Src/main.c **** 
 161:Core/Src/main.c **** 	  //TODO: Visual indicator: Turn on LED1 to signal processing start
 162:Core/Src/main.c **** 
 163:Core/Src/main.c **** 
 164:Core/Src/main.c **** 	  //TODO: Keep the LEDs ON for 2s
 165:Core/Src/main.c **** 
 166:Core/Src/main.c **** 	  //TODO: Turn OFF LEDs
 167:Core/Src/main.c ****   }
 168:Core/Src/main.c ****   /* USER CODE END 3 */
 169:Core/Src/main.c **** }
 170:Core/Src/main.c **** 
 171:Core/Src/main.c **** /**
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 10


 172:Core/Src/main.c ****   * @brief System Clock Configuration
 173:Core/Src/main.c ****   * @retval None
 174:Core/Src/main.c ****   */
 175:Core/Src/main.c **** void SystemClock_Config(void)
 176:Core/Src/main.c **** {
 355              		.loc 1 176 1
 356              		.cfi_startproc
 357              		@ args = 0, pretend = 0, frame = 80
 358              		@ frame_needed = 1, uses_anonymous_args = 0
 359 0000 80B5     		push	{r7, lr}
 360              	.LCFI3:
 361              		.cfi_def_cfa_offset 8
 362              		.cfi_offset 7, -8
 363              		.cfi_offset 14, -4
 364 0002 94B0     		sub	sp, sp, #80
 365              	.LCFI4:
 366              		.cfi_def_cfa_offset 88
 367 0004 00AF     		add	r7, sp, #0
 368              	.LCFI5:
 369              		.cfi_def_cfa_register 7
 177:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 370              		.loc 1 177 22
 371 0006 07F11C03 		add	r3, r7, #28
 372 000a 3422     		movs	r2, #52
 373 000c 0021     		movs	r1, #0
 374 000e 1846     		mov	r0, r3
 375 0010 FFF7FEFF 		bl	memset
 178:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 376              		.loc 1 178 22
 377 0014 07F10803 		add	r3, r7, #8
 378 0018 0022     		movs	r2, #0
 379 001a 1A60     		str	r2, [r3]
 380 001c 5A60     		str	r2, [r3, #4]
 381 001e 9A60     		str	r2, [r3, #8]
 382 0020 DA60     		str	r2, [r3, #12]
 383 0022 1A61     		str	r2, [r3, #16]
 384              	.LBB5:
 179:Core/Src/main.c **** 
 180:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 181:Core/Src/main.c ****   */
 182:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 385              		.loc 1 182 3
 386 0024 0023     		movs	r3, #0
 387 0026 7B60     		str	r3, [r7, #4]
 388 0028 2A4B     		ldr	r3, .L11
 389 002a 1B6C     		ldr	r3, [r3, #64]
 390 002c 294A     		ldr	r2, .L11
 391 002e 43F08053 		orr	r3, r3, #268435456
 392 0032 1364     		str	r3, [r2, #64]
 393 0034 274B     		ldr	r3, .L11
 394 0036 1B6C     		ldr	r3, [r3, #64]
 395 0038 03F08053 		and	r3, r3, #268435456
 396 003c 7B60     		str	r3, [r7, #4]
 397 003e 7B68     		ldr	r3, [r7, #4]
 398              	.LBE5:
 399              	.LBB6:
 183:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 11


 400              		.loc 1 183 3
 401 0040 0023     		movs	r3, #0
 402 0042 3B60     		str	r3, [r7]
 403 0044 244B     		ldr	r3, .L11+4
 404 0046 1B68     		ldr	r3, [r3]
 405 0048 23F44043 		bic	r3, r3, #49152
 406 004c 224A     		ldr	r2, .L11+4
 407 004e 43F48043 		orr	r3, r3, #16384
 408 0052 1360     		str	r3, [r2]
 409 0054 204B     		ldr	r3, .L11+4
 410 0056 1B68     		ldr	r3, [r3]
 411 0058 03F44043 		and	r3, r3, #49152
 412 005c 3B60     		str	r3, [r7]
 413 005e 3B68     		ldr	r3, [r7]
 414              	.LBE6:
 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 186:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 187:Core/Src/main.c ****   */
 188:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 415              		.loc 1 188 36
 416 0060 0123     		movs	r3, #1
 417 0062 FB61     		str	r3, [r7, #28]
 189:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 418              		.loc 1 189 30
 419 0064 4FF48033 		mov	r3, #65536
 420 0068 3B62     		str	r3, [r7, #32]
 190:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 421              		.loc 1 190 34
 422 006a 0223     		movs	r3, #2
 423 006c 7B63     		str	r3, [r7, #52]
 191:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 424              		.loc 1 191 35
 425 006e 4FF48003 		mov	r3, #4194304
 426 0072 BB63     		str	r3, [r7, #56]
 192:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 15;
 427              		.loc 1 192 30
 428 0074 0F23     		movs	r3, #15
 429 0076 FB63     		str	r3, [r7, #60]
 193:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 144;
 430              		.loc 1 193 30
 431 0078 9023     		movs	r3, #144
 432 007a 3B64     		str	r3, [r7, #64]
 194:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 433              		.loc 1 194 30
 434 007c 0223     		movs	r3, #2
 435 007e 7B64     		str	r3, [r7, #68]
 195:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 436              		.loc 1 195 30
 437 0080 0223     		movs	r3, #2
 438 0082 BB64     		str	r3, [r7, #72]
 196:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 439              		.loc 1 196 30
 440 0084 0223     		movs	r3, #2
 441 0086 FB64     		str	r3, [r7, #76]
 197:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 442              		.loc 1 197 7
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 12


 443 0088 07F11C03 		add	r3, r7, #28
 444 008c 1846     		mov	r0, r3
 445 008e FFF7FEFF 		bl	HAL_RCC_OscConfig
 446 0092 0346     		mov	r3, r0
 447              		.loc 1 197 6 discriminator 1
 448 0094 002B     		cmp	r3, #0
 449 0096 01D0     		beq	.L8
 198:Core/Src/main.c ****   {
 199:Core/Src/main.c ****     Error_Handler();
 450              		.loc 1 199 5
 451 0098 FFF7FEFF 		bl	Error_Handler
 452              	.L8:
 200:Core/Src/main.c ****   }
 201:Core/Src/main.c **** 
 202:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 203:Core/Src/main.c ****   */
 204:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 453              		.loc 1 204 31
 454 009c 0F23     		movs	r3, #15
 455 009e BB60     		str	r3, [r7, #8]
 205:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 206:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 456              		.loc 1 206 34
 457 00a0 0223     		movs	r3, #2
 458 00a2 FB60     		str	r3, [r7, #12]
 207:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 459              		.loc 1 207 35
 460 00a4 0023     		movs	r3, #0
 461 00a6 3B61     		str	r3, [r7, #16]
 208:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 462              		.loc 1 208 36
 463 00a8 4FF4A053 		mov	r3, #5120
 464 00ac 7B61     		str	r3, [r7, #20]
 209:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 465              		.loc 1 209 36
 466 00ae 4FF48053 		mov	r3, #4096
 467 00b2 BB61     		str	r3, [r7, #24]
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 468              		.loc 1 211 7
 469 00b4 07F10803 		add	r3, r7, #8
 470 00b8 0321     		movs	r1, #3
 471 00ba 1846     		mov	r0, r3
 472 00bc FFF7FEFF 		bl	HAL_RCC_ClockConfig
 473 00c0 0346     		mov	r3, r0
 474              		.loc 1 211 6 discriminator 1
 475 00c2 002B     		cmp	r3, #0
 476 00c4 01D0     		beq	.L10
 212:Core/Src/main.c ****   {
 213:Core/Src/main.c ****     Error_Handler();
 477              		.loc 1 213 5
 478 00c6 FFF7FEFF 		bl	Error_Handler
 479              	.L10:
 214:Core/Src/main.c ****   }
 215:Core/Src/main.c **** }
 480              		.loc 1 215 1
 481 00ca 00BF     		nop
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 13


 482 00cc 5037     		adds	r7, r7, #80
 483              	.LCFI6:
 484              		.cfi_def_cfa_offset 8
 485 00ce BD46     		mov	sp, r7
 486              	.LCFI7:
 487              		.cfi_def_cfa_register 13
 488              		@ sp needed
 489 00d0 80BD     		pop	{r7, pc}
 490              	.L12:
 491 00d2 00BF     		.align	2
 492              	.L11:
 493 00d4 00380240 		.word	1073887232
 494 00d8 00700040 		.word	1073770496
 495              		.cfi_endproc
 496              	.LFE160:
 498              		.section	.text.MX_GPIO_Init,"ax",%progbits
 499              		.align	1
 500              		.syntax unified
 501              		.thumb
 502              		.thumb_func
 504              	MX_GPIO_Init:
 505              	.LFB161:
 216:Core/Src/main.c **** 
 217:Core/Src/main.c **** /**
 218:Core/Src/main.c ****   * @brief GPIO Initialization Function
 219:Core/Src/main.c ****   * @param None
 220:Core/Src/main.c ****   * @retval None
 221:Core/Src/main.c ****   */
 222:Core/Src/main.c **** static void MX_GPIO_Init(void)
 223:Core/Src/main.c **** {
 506              		.loc 1 223 1
 507              		.cfi_startproc
 508              		@ args = 0, pretend = 0, frame = 32
 509              		@ frame_needed = 1, uses_anonymous_args = 0
 510 0000 80B5     		push	{r7, lr}
 511              	.LCFI8:
 512              		.cfi_def_cfa_offset 8
 513              		.cfi_offset 7, -8
 514              		.cfi_offset 14, -4
 515 0002 88B0     		sub	sp, sp, #32
 516              	.LCFI9:
 517              		.cfi_def_cfa_offset 40
 518 0004 00AF     		add	r7, sp, #0
 519              	.LCFI10:
 520              		.cfi_def_cfa_register 7
 224:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 521              		.loc 1 224 20
 522 0006 07F10C03 		add	r3, r7, #12
 523 000a 0022     		movs	r2, #0
 524 000c 1A60     		str	r2, [r3]
 525 000e 5A60     		str	r2, [r3, #4]
 526 0010 9A60     		str	r2, [r3, #8]
 527 0012 DA60     		str	r2, [r3, #12]
 528 0014 1A61     		str	r2, [r3, #16]
 529              	.LBB7:
 225:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
 226:Core/Src/main.c **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 14


 227:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 230:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 530              		.loc 1 230 3
 531 0016 0023     		movs	r3, #0
 532 0018 BB60     		str	r3, [r7, #8]
 533 001a 1F4B     		ldr	r3, .L14
 534 001c 1B6B     		ldr	r3, [r3, #48]
 535 001e 1E4A     		ldr	r2, .L14
 536 0020 43F00403 		orr	r3, r3, #4
 537 0024 1363     		str	r3, [r2, #48]
 538 0026 1C4B     		ldr	r3, .L14
 539 0028 1B6B     		ldr	r3, [r3, #48]
 540 002a 03F00403 		and	r3, r3, #4
 541 002e BB60     		str	r3, [r7, #8]
 542 0030 BB68     		ldr	r3, [r7, #8]
 543              	.LBE7:
 544              	.LBB8:
 231:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 545              		.loc 1 231 3
 546 0032 0023     		movs	r3, #0
 547 0034 7B60     		str	r3, [r7, #4]
 548 0036 184B     		ldr	r3, .L14
 549 0038 1B6B     		ldr	r3, [r3, #48]
 550 003a 174A     		ldr	r2, .L14
 551 003c 43F08003 		orr	r3, r3, #128
 552 0040 1363     		str	r3, [r2, #48]
 553 0042 154B     		ldr	r3, .L14
 554 0044 1B6B     		ldr	r3, [r3, #48]
 555 0046 03F08003 		and	r3, r3, #128
 556 004a 7B60     		str	r3, [r7, #4]
 557 004c 7B68     		ldr	r3, [r7, #4]
 558              	.LBE8:
 559              	.LBB9:
 232:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 560              		.loc 1 232 3
 561 004e 0023     		movs	r3, #0
 562 0050 3B60     		str	r3, [r7]
 563 0052 114B     		ldr	r3, .L14
 564 0054 1B6B     		ldr	r3, [r3, #48]
 565 0056 104A     		ldr	r2, .L14
 566 0058 43F00203 		orr	r3, r3, #2
 567 005c 1363     		str	r3, [r2, #48]
 568 005e 0E4B     		ldr	r3, .L14
 569 0060 1B6B     		ldr	r3, [r3, #48]
 570 0062 03F00203 		and	r3, r3, #2
 571 0066 3B60     		str	r3, [r7]
 572 0068 3B68     		ldr	r3, [r7]
 573              	.LBE9:
 233:Core/Src/main.c **** 
 234:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 235:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 574              		.loc 1 235 3
 575 006a 0022     		movs	r2, #0
 576 006c FF21     		movs	r1, #255
 577 006e 0B48     		ldr	r0, .L14+4
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 15


 578 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 236:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB1 PB2 PB3
 239:Core/Src/main.c ****                            PB4 PB5 PB6 PB7 */
 240:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 579              		.loc 1 240 23
 580 0074 FF23     		movs	r3, #255
 581 0076 FB60     		str	r3, [r7, #12]
 241:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 242:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 582              		.loc 1 242 24
 583 0078 0123     		movs	r3, #1
 584 007a 3B61     		str	r3, [r7, #16]
 243:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 585              		.loc 1 243 24
 586 007c 0023     		movs	r3, #0
 587 007e 7B61     		str	r3, [r7, #20]
 244:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 588              		.loc 1 244 25
 589 0080 0023     		movs	r3, #0
 590 0082 BB61     		str	r3, [r7, #24]
 245:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 591              		.loc 1 245 3
 592 0084 07F10C03 		add	r3, r7, #12
 593 0088 1946     		mov	r1, r3
 594 008a 0448     		ldr	r0, .L14+4
 595 008c FFF7FEFF 		bl	HAL_GPIO_Init
 246:Core/Src/main.c **** 
 247:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 248:Core/Src/main.c **** 
 249:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 250:Core/Src/main.c **** }
 596              		.loc 1 250 1
 597 0090 00BF     		nop
 598 0092 2037     		adds	r7, r7, #32
 599              	.LCFI11:
 600              		.cfi_def_cfa_offset 8
 601 0094 BD46     		mov	sp, r7
 602              	.LCFI12:
 603              		.cfi_def_cfa_register 13
 604              		@ sp needed
 605 0096 80BD     		pop	{r7, pc}
 606              	.L15:
 607              		.align	2
 608              	.L14:
 609 0098 00380240 		.word	1073887232
 610 009c 00040240 		.word	1073873920
 611              		.cfi_endproc
 612              	.LFE161:
 614              		.section	.text.calculate_mandelbrot_fixed_point_arithmetic,"ax",%progbits
 615              		.align	1
 616              		.global	calculate_mandelbrot_fixed_point_arithmetic
 617              		.syntax unified
 618              		.thumb
 619              		.thumb_func
 621              	calculate_mandelbrot_fixed_point_arithmetic:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 16


 622              	.LFB162:
 251:Core/Src/main.c **** 
 252:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 253:Core/Src/main.c **** //TODO: Function signatures you defined previously , implement them here
 254:Core/Src/main.c **** uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations){
 623              		.loc 1 254 96
 624              		.cfi_startproc
 625              		@ args = 0, pretend = 0, frame = 80
 626              		@ frame_needed = 1, uses_anonymous_args = 0
 627              		@ link register save eliminated.
 628 0000 2DE9B003 		push	{r4, r5, r7, r8, r9}
 629              	.LCFI13:
 630              		.cfi_def_cfa_offset 20
 631              		.cfi_offset 4, -20
 632              		.cfi_offset 5, -16
 633              		.cfi_offset 7, -12
 634              		.cfi_offset 8, -8
 635              		.cfi_offset 9, -4
 636 0004 95B0     		sub	sp, sp, #84
 637              	.LCFI14:
 638              		.cfi_def_cfa_offset 104
 639 0006 00AF     		add	r7, sp, #0
 640              	.LCFI15:
 641              		.cfi_def_cfa_register 7
 642 0008 F860     		str	r0, [r7, #12]
 643 000a B960     		str	r1, [r7, #8]
 644 000c 7A60     		str	r2, [r7, #4]
 255:Core/Src/main.c ****     const int SCALE = 1000;
 645              		.loc 1 255 15
 646 000e 4FF47A73 		mov	r3, #1000
 647 0012 BB63     		str	r3, [r7, #56]
 256:Core/Src/main.c ****     const int THREE_FIVE = 3500;
 648              		.loc 1 256 15
 649 0014 40F6AC53 		movw	r3, #3500
 650 0018 7B63     		str	r3, [r7, #52]
 257:Core/Src/main.c ****     const int TWO = 2000;
 651              		.loc 1 257 15
 652 001a 4FF4FA63 		mov	r3, #2000
 653 001e 3B63     		str	r3, [r7, #48]
 258:Core/Src/main.c ****     const int TWO_FIVE = 2500;
 654              		.loc 1 258 15
 655 0020 40F6C413 		movw	r3, #2500
 656 0024 FB62     		str	r3, [r7, #44]
 259:Core/Src/main.c ****     const int ONE = 1000;
 657              		.loc 1 259 15
 658 0026 4FF47A73 		mov	r3, #1000
 659 002a BB62     		str	r3, [r7, #40]
 260:Core/Src/main.c ****     const int FOUR = 4000;
 660              		.loc 1 260 15
 661 002c 4FF47A63 		mov	r3, #4000
 662 0030 7B62     		str	r3, [r7, #36]
 261:Core/Src/main.c **** 
 262:Core/Src/main.c ****     checksum = 0;
 663              		.loc 1 262 14
 664 0032 3F49     		ldr	r1, .L25
 665 0034 4FF00002 		mov	r2, #0
 666 0038 4FF00003 		mov	r3, #0
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 17


 667 003c C1E90023 		strd	r2, [r1]
 668              	.LBB10:
 263:Core/Src/main.c ****     for (int32_t y = 0; y < height; y++) {
 669              		.loc 1 263 18
 670 0040 0023     		movs	r3, #0
 671 0042 FB64     		str	r3, [r7, #76]
 672              		.loc 1 263 5
 673 0044 65E0     		b	.L17
 674              	.L23:
 675              	.LBB11:
 264:Core/Src/main.c ****         for (int32_t x = 0; x < width; x++) {
 676              		.loc 1 264 22
 677 0046 0023     		movs	r3, #0
 678 0048 BB64     		str	r3, [r7, #72]
 679              		.loc 1 264 9
 680 004a 5BE0     		b	.L18
 681              	.L22:
 682              	.LBB12:
 265:Core/Src/main.c ****             int32_t x0 = ((int32_t)x * THREE_FIVE) / width - TWO_FIVE;
 683              		.loc 1 265 38
 684 004c BB6C     		ldr	r3, [r7, #72]
 685 004e 7A6B     		ldr	r2, [r7, #52]
 686 0050 03FB02F2 		mul	r2, r3, r2
 687              		.loc 1 265 52
 688 0054 FB68     		ldr	r3, [r7, #12]
 689 0056 92FBF3F2 		sdiv	r2, r2, r3
 690              		.loc 1 265 21
 691 005a FB6A     		ldr	r3, [r7, #44]
 692 005c D31A     		subs	r3, r2, r3
 693 005e 3B62     		str	r3, [r7, #32]
 266:Core/Src/main.c ****             int32_t y0 = ((int32_t)y * TWO) / height - ONE;
 694              		.loc 1 266 38
 695 0060 FB6C     		ldr	r3, [r7, #76]
 696 0062 3A6B     		ldr	r2, [r7, #48]
 697 0064 03FB02F2 		mul	r2, r3, r2
 698              		.loc 1 266 45
 699 0068 BB68     		ldr	r3, [r7, #8]
 700 006a 92FBF3F2 		sdiv	r2, r2, r3
 701              		.loc 1 266 21
 702 006e BB6A     		ldr	r3, [r7, #40]
 703 0070 D31A     		subs	r3, r2, r3
 704 0072 FB61     		str	r3, [r7, #28]
 267:Core/Src/main.c ****             int32_t xi = 0;
 705              		.loc 1 267 21
 706 0074 0023     		movs	r3, #0
 707 0076 7B64     		str	r3, [r7, #68]
 268:Core/Src/main.c ****             int32_t yi = 0;
 708              		.loc 1 268 21
 709 0078 0023     		movs	r3, #0
 710 007a 3B64     		str	r3, [r7, #64]
 269:Core/Src/main.c ****             int32_t iteration = 0;
 711              		.loc 1 269 21
 712 007c 0023     		movs	r3, #0
 713 007e FB63     		str	r3, [r7, #60]
 270:Core/Src/main.c ****             while (((((int32_t)xi * xi + (int32_t)yi * yi) / SCALE) <= FOUR) && (iteration < max_it
 714              		.loc 1 270 19
 715 0080 1EE0     		b	.L19
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 18


 716              	.L21:
 717              	.LBB13:
 271:Core/Src/main.c ****                 int32_t xi_temp = ((int32_t)xi * xi - (int32_t)yi * yi) / SCALE + x0;
 718              		.loc 1 271 48
 719 0082 7B6C     		ldr	r3, [r7, #68]
 720 0084 03FB03F2 		mul	r2, r3, r3
 721              		.loc 1 271 67
 722 0088 3B6C     		ldr	r3, [r7, #64]
 723 008a 03FB03F3 		mul	r3, r3, r3
 724              		.loc 1 271 53
 725 008e D21A     		subs	r2, r2, r3
 726              		.loc 1 271 73
 727 0090 BB6B     		ldr	r3, [r7, #56]
 728 0092 92FBF3F3 		sdiv	r3, r2, r3
 729              		.loc 1 271 25
 730 0096 3A6A     		ldr	r2, [r7, #32]
 731 0098 1344     		add	r3, r3, r2
 732 009a BB61     		str	r3, [r7, #24]
 272:Core/Src/main.c ****                 int32_t yi_temp = ((int32_t)2 * xi * yi) / SCALE + y0;
 733              		.loc 1 272 52
 734 009c 7B6C     		ldr	r3, [r7, #68]
 735 009e 3A6C     		ldr	r2, [r7, #64]
 736 00a0 02FB03F3 		mul	r3, r2, r3
 737 00a4 5A00     		lsls	r2, r3, #1
 738              		.loc 1 272 58
 739 00a6 BB6B     		ldr	r3, [r7, #56]
 740 00a8 92FBF3F3 		sdiv	r3, r2, r3
 741              		.loc 1 272 25
 742 00ac FA69     		ldr	r2, [r7, #28]
 743 00ae 1344     		add	r3, r3, r2
 744 00b0 7B61     		str	r3, [r7, #20]
 273:Core/Src/main.c ****                 xi = xi_temp;
 745              		.loc 1 273 20
 746 00b2 BB69     		ldr	r3, [r7, #24]
 747 00b4 7B64     		str	r3, [r7, #68]
 274:Core/Src/main.c ****                 yi = yi_temp;
 748              		.loc 1 274 20
 749 00b6 7B69     		ldr	r3, [r7, #20]
 750 00b8 3B64     		str	r3, [r7, #64]
 275:Core/Src/main.c ****                 iteration++;
 751              		.loc 1 275 26
 752 00ba FB6B     		ldr	r3, [r7, #60]
 753 00bc 0133     		adds	r3, r3, #1
 754 00be FB63     		str	r3, [r7, #60]
 755              	.L19:
 756              	.LBE13:
 270:Core/Src/main.c ****                 int32_t xi_temp = ((int32_t)xi * xi - (int32_t)yi * yi) / SCALE + x0;
 757              		.loc 1 270 35
 758 00c0 7B6C     		ldr	r3, [r7, #68]
 759 00c2 03FB03F2 		mul	r2, r3, r3
 270:Core/Src/main.c ****                 int32_t xi_temp = ((int32_t)xi * xi - (int32_t)yi * yi) / SCALE + x0;
 760              		.loc 1 270 54
 761 00c6 3B6C     		ldr	r3, [r7, #64]
 762 00c8 03FB03F3 		mul	r3, r3, r3
 270:Core/Src/main.c ****                 int32_t xi_temp = ((int32_t)xi * xi - (int32_t)yi * yi) / SCALE + x0;
 763              		.loc 1 270 40
 764 00cc 1A44     		add	r2, r2, r3
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 19


 270:Core/Src/main.c ****                 int32_t xi_temp = ((int32_t)xi * xi - (int32_t)yi * yi) / SCALE + x0;
 765              		.loc 1 270 60
 766 00ce BB6B     		ldr	r3, [r7, #56]
 767 00d0 92FBF3F3 		sdiv	r3, r2, r3
 270:Core/Src/main.c ****                 int32_t xi_temp = ((int32_t)xi * xi - (int32_t)yi * yi) / SCALE + x0;
 768              		.loc 1 270 78
 769 00d4 7A6A     		ldr	r2, [r7, #36]
 770 00d6 9A42     		cmp	r2, r3
 771 00d8 03DB     		blt	.L20
 270:Core/Src/main.c ****                 int32_t xi_temp = ((int32_t)xi * xi - (int32_t)yi * yi) / SCALE + x0;
 772              		.loc 1 270 78 is_stmt 0 discriminator 1
 773 00da FA6B     		ldr	r2, [r7, #60]
 774 00dc 7B68     		ldr	r3, [r7, #4]
 775 00de 9A42     		cmp	r2, r3
 776 00e0 CFDB     		blt	.L21
 777              	.L20:
 276:Core/Src/main.c ****             }
 277:Core/Src/main.c ****             checksum += iteration;
 778              		.loc 1 277 22 is_stmt 1
 779 00e2 FB6B     		ldr	r3, [r7, #60]
 780 00e4 DA17     		asrs	r2, r3, #31
 781 00e6 1C46     		mov	r4, r3
 782 00e8 1546     		mov	r5, r2
 783 00ea 114B     		ldr	r3, .L25
 784 00ec D3E90023 		ldrd	r2, [r3]
 785 00f0 14EB0208 		adds	r8, r4, r2
 786 00f4 45EB0309 		adc	r9, r5, r3
 787 00f8 0D4B     		ldr	r3, .L25
 788 00fa C3E90089 		strd	r8, [r3]
 789              	.LBE12:
 264:Core/Src/main.c ****             int32_t x0 = ((int32_t)x * THREE_FIVE) / width - TWO_FIVE;
 790              		.loc 1 264 41 discriminator 2
 791 00fe BB6C     		ldr	r3, [r7, #72]
 792 0100 0133     		adds	r3, r3, #1
 793 0102 BB64     		str	r3, [r7, #72]
 794              	.L18:
 264:Core/Src/main.c ****             int32_t x0 = ((int32_t)x * THREE_FIVE) / width - TWO_FIVE;
 795              		.loc 1 264 31 discriminator 1
 796 0104 BA6C     		ldr	r2, [r7, #72]
 797 0106 FB68     		ldr	r3, [r7, #12]
 798 0108 9A42     		cmp	r2, r3
 799 010a 9FDB     		blt	.L22
 800              	.LBE11:
 263:Core/Src/main.c ****         for (int32_t x = 0; x < width; x++) {
 801              		.loc 1 263 38 discriminator 2
 802 010c FB6C     		ldr	r3, [r7, #76]
 803 010e 0133     		adds	r3, r3, #1
 804 0110 FB64     		str	r3, [r7, #76]
 805              	.L17:
 263:Core/Src/main.c ****         for (int32_t x = 0; x < width; x++) {
 806              		.loc 1 263 27 discriminator 1
 807 0112 FA6C     		ldr	r2, [r7, #76]
 808 0114 BB68     		ldr	r3, [r7, #8]
 809 0116 9A42     		cmp	r2, r3
 810 0118 95DB     		blt	.L23
 811              	.LBE10:
 278:Core/Src/main.c ****         }
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 20


 279:Core/Src/main.c ****     }
 280:Core/Src/main.c ****     return checksum;
 812              		.loc 1 280 12
 813 011a 054B     		ldr	r3, .L25
 814 011c D3E90023 		ldrd	r2, [r3]
 281:Core/Src/main.c **** }
 815              		.loc 1 281 1
 816 0120 1046     		mov	r0, r2
 817 0122 1946     		mov	r1, r3
 818 0124 5437     		adds	r7, r7, #84
 819              	.LCFI16:
 820              		.cfi_def_cfa_offset 20
 821 0126 BD46     		mov	sp, r7
 822              	.LCFI17:
 823              		.cfi_def_cfa_register 13
 824              		@ sp needed
 825 0128 BDE8B003 		pop	{r4, r5, r7, r8, r9}
 826              	.LCFI18:
 827              		.cfi_restore 9
 828              		.cfi_restore 8
 829              		.cfi_restore 7
 830              		.cfi_restore 5
 831              		.cfi_restore 4
 832              		.cfi_def_cfa_offset 0
 833 012c 7047     		bx	lr
 834              	.L26:
 835 012e 00BF     		.align	2
 836              	.L25:
 837 0130 00000000 		.word	checksum
 838              		.cfi_endproc
 839              	.LFE162:
 841              		.global	__aeabi_i2d
 842              		.global	__aeabi_dmul
 843              		.global	__aeabi_dsub
 844              		.global	__aeabi_dadd
 845              		.global	__aeabi_dcmple
 846              		.section	.text.calculate_mandelbrot_double,"ax",%progbits
 847              		.align	1
 848              		.global	calculate_mandelbrot_double
 849              		.syntax unified
 850              		.thumb
 851              		.thumb_func
 853              	calculate_mandelbrot_double:
 854              	.LFB163:
 282:Core/Src/main.c **** 
 283:Core/Src/main.c **** //TODO: Mandelbroat using variable type double
 284:Core/Src/main.c **** uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations){
 855              		.loc 1 284 80
 856              		.cfi_startproc
 857              		@ args = 0, pretend = 0, frame = 72
 858              		@ frame_needed = 1, uses_anonymous_args = 0
 859 0000 2DE9B04F 		push	{r4, r5, r7, r8, r9, r10, fp, lr}
 860              	.LCFI19:
 861              		.cfi_def_cfa_offset 32
 862              		.cfi_offset 4, -32
 863              		.cfi_offset 5, -28
 864              		.cfi_offset 7, -24
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 21


 865              		.cfi_offset 8, -20
 866              		.cfi_offset 9, -16
 867              		.cfi_offset 10, -12
 868              		.cfi_offset 11, -8
 869              		.cfi_offset 14, -4
 870 0004 92B0     		sub	sp, sp, #72
 871              	.LCFI20:
 872              		.cfi_def_cfa_offset 104
 873 0006 00AF     		add	r7, sp, #0
 874              	.LCFI21:
 875              		.cfi_def_cfa_register 7
 876 0008 F860     		str	r0, [r7, #12]
 877 000a B960     		str	r1, [r7, #8]
 878 000c 7A60     		str	r2, [r7, #4]
 285:Core/Src/main.c ****     //uint64_t mandelbrot_sum = 0;
 286:Core/Src/main.c ****     //TODO: Complete the function implementation
 287:Core/Src/main.c ****     checksum = 0;
 879              		.loc 1 287 14
 880 000e 7749     		ldr	r1, .L38
 881 0010 4FF00002 		mov	r2, #0
 882 0014 4FF00003 		mov	r3, #0
 883 0018 C1E90023 		strd	r2, [r1]
 884              	.LBB14:
 288:Core/Src/main.c ****     for (int y = 0; y <= height-1; y++) {
 885              		.loc 1 288 14
 886 001c 0023     		movs	r3, #0
 887 001e 7B64     		str	r3, [r7, #68]
 888              		.loc 1 288 5
 889 0020 D6E0     		b	.L28
 890              	.L35:
 891              	.LBB15:
 289:Core/Src/main.c ****         for (int x = 0; x <= width-1; x++) {
 892              		.loc 1 289 18
 893 0022 0023     		movs	r3, #0
 894 0024 3B64     		str	r3, [r7, #64]
 895              		.loc 1 289 9
 896 0026 CBE0     		b	.L29
 897              	.L34:
 898              	.LBB16:
 290:Core/Src/main.c ****             double x0 = ((double)x/(double)width)*(3.5)-2.5;
 899              		.loc 1 290 26
 900 0028 386C     		ldr	r0, [r7, #64]
 901 002a FFF7FEFF 		bl	__aeabi_i2d
 902 002e 8246     		mov	r10, r0
 903 0030 8B46     		mov	fp, r1
 904              		.loc 1 290 36
 905 0032 F868     		ldr	r0, [r7, #12]
 906 0034 FFF7FEFF 		bl	__aeabi_i2d
 907 0038 0246     		mov	r2, r0
 908 003a 0B46     		mov	r3, r1
 909              		.loc 1 290 35
 910 003c 5046     		mov	r0, r10
 911 003e 5946     		mov	r1, fp
 912 0040 FFF7FEFF 		bl	__aeabi_ddiv
 913 0044 0246     		mov	r2, r0
 914 0046 0B46     		mov	r3, r1
 915 0048 1046     		mov	r0, r2
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 22


 916 004a 1946     		mov	r1, r3
 917              		.loc 1 290 50
 918 004c 4FF00002 		mov	r2, #0
 919 0050 674B     		ldr	r3, .L38+4
 920 0052 FFF7FEFF 		bl	__aeabi_dmul
 921 0056 0246     		mov	r2, r0
 922 0058 0B46     		mov	r3, r1
 923 005a 1046     		mov	r0, r2
 924 005c 1946     		mov	r1, r3
 925              		.loc 1 290 20
 926 005e 4FF00002 		mov	r2, #0
 927 0062 644B     		ldr	r3, .L38+8
 928 0064 FFF7FEFF 		bl	__aeabi_dsub
 929 0068 0246     		mov	r2, r0
 930 006a 0B46     		mov	r3, r1
 931 006c C7E90823 		strd	r2, [r7, #32]
 291:Core/Src/main.c ****             double y0 = ((double)y/(double)height)*(2.0)-1.0;
 932              		.loc 1 291 26
 933 0070 786C     		ldr	r0, [r7, #68]
 934 0072 FFF7FEFF 		bl	__aeabi_i2d
 935 0076 8246     		mov	r10, r0
 936 0078 8B46     		mov	fp, r1
 937              		.loc 1 291 36
 938 007a B868     		ldr	r0, [r7, #8]
 939 007c FFF7FEFF 		bl	__aeabi_i2d
 940 0080 0246     		mov	r2, r0
 941 0082 0B46     		mov	r3, r1
 942              		.loc 1 291 35
 943 0084 5046     		mov	r0, r10
 944 0086 5946     		mov	r1, fp
 945 0088 FFF7FEFF 		bl	__aeabi_ddiv
 946 008c 0246     		mov	r2, r0
 947 008e 0B46     		mov	r3, r1
 948 0090 1046     		mov	r0, r2
 949 0092 1946     		mov	r1, r3
 950              		.loc 1 291 51
 951 0094 0246     		mov	r2, r0
 952 0096 0B46     		mov	r3, r1
 953 0098 FFF7FEFF 		bl	__aeabi_dadd
 954 009c 0246     		mov	r2, r0
 955 009e 0B46     		mov	r3, r1
 956 00a0 1046     		mov	r0, r2
 957 00a2 1946     		mov	r1, r3
 958              		.loc 1 291 20
 959 00a4 4FF00002 		mov	r2, #0
 960 00a8 534B     		ldr	r3, .L38+12
 961 00aa FFF7FEFF 		bl	__aeabi_dsub
 962 00ae 0246     		mov	r2, r0
 963 00b0 0B46     		mov	r3, r1
 964 00b2 C7E90623 		strd	r2, [r7, #24]
 292:Core/Src/main.c ****             int iteration = 0;
 965              		.loc 1 292 17
 966 00b6 0023     		movs	r3, #0
 967 00b8 FB63     		str	r3, [r7, #60]
 293:Core/Src/main.c ****             double xi = 0;
 968              		.loc 1 293 20
 969 00ba 4FF00002 		mov	r2, #0
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 23


 970 00be 4FF00003 		mov	r3, #0
 971 00c2 C7E90C23 		strd	r2, [r7, #48]
 294:Core/Src/main.c ****             double yi = 0;
 972              		.loc 1 294 20
 973 00c6 4FF00002 		mov	r2, #0
 974 00ca 4FF00003 		mov	r3, #0
 975 00ce C7E90A23 		strd	r2, [r7, #40]
 295:Core/Src/main.c ****             while ((xi*xi + yi*yi) <= (4) && iteration < max_iterations) {
 976              		.loc 1 295 19
 977 00d2 3EE0     		b	.L30
 978              	.L33:
 979              	.LBB17:
 296:Core/Src/main.c ****                 double temp = (xi*xi - yi*yi);
 980              		.loc 1 296 34
 981 00d4 D7E90C23 		ldrd	r2, [r7, #48]
 982 00d8 D7E90C01 		ldrd	r0, [r7, #48]
 983 00dc FFF7FEFF 		bl	__aeabi_dmul
 984 00e0 0246     		mov	r2, r0
 985 00e2 0B46     		mov	r3, r1
 986 00e4 9246     		mov	r10, r2
 987 00e6 9B46     		mov	fp, r3
 988              		.loc 1 296 42
 989 00e8 D7E90A23 		ldrd	r2, [r7, #40]
 990 00ec D7E90A01 		ldrd	r0, [r7, #40]
 991 00f0 FFF7FEFF 		bl	__aeabi_dmul
 992 00f4 0246     		mov	r2, r0
 993 00f6 0B46     		mov	r3, r1
 994              		.loc 1 296 24
 995 00f8 5046     		mov	r0, r10
 996 00fa 5946     		mov	r1, fp
 997 00fc FFF7FEFF 		bl	__aeabi_dsub
 998 0100 0246     		mov	r2, r0
 999 0102 0B46     		mov	r3, r1
 1000 0104 C7E90423 		strd	r2, [r7, #16]
 297:Core/Src/main.c ****                 yi = (2*xi*yi)+y0;
 1001              		.loc 1 297 24
 1002 0108 D7E90C01 		ldrd	r0, [r7, #48]
 1003 010c 0246     		mov	r2, r0
 1004 010e 0B46     		mov	r3, r1
 1005 0110 FFF7FEFF 		bl	__aeabi_dadd
 1006 0114 0246     		mov	r2, r0
 1007 0116 0B46     		mov	r3, r1
 1008 0118 1046     		mov	r0, r2
 1009 011a 1946     		mov	r1, r3
 1010              		.loc 1 297 27
 1011 011c D7E90A23 		ldrd	r2, [r7, #40]
 1012 0120 FFF7FEFF 		bl	__aeabi_dmul
 1013 0124 0246     		mov	r2, r0
 1014 0126 0B46     		mov	r3, r1
 1015              		.loc 1 297 20
 1016 0128 D7E90601 		ldrd	r0, [r7, #24]
 1017 012c FFF7FEFF 		bl	__aeabi_dadd
 1018 0130 0246     		mov	r2, r0
 1019 0132 0B46     		mov	r3, r1
 1020 0134 C7E90A23 		strd	r2, [r7, #40]
 298:Core/Src/main.c ****                 xi = temp+x0;
 1021              		.loc 1 298 20
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 24


 1022 0138 D7E90823 		ldrd	r2, [r7, #32]
 1023 013c D7E90401 		ldrd	r0, [r7, #16]
 1024 0140 FFF7FEFF 		bl	__aeabi_dadd
 1025 0144 0246     		mov	r2, r0
 1026 0146 0B46     		mov	r3, r1
 1027 0148 C7E90C23 		strd	r2, [r7, #48]
 299:Core/Src/main.c ****                 iteration++;
 1028              		.loc 1 299 26
 1029 014c FB6B     		ldr	r3, [r7, #60]
 1030 014e 0133     		adds	r3, r3, #1
 1031 0150 FB63     		str	r3, [r7, #60]
 1032              	.L30:
 1033              	.LBE17:
 295:Core/Src/main.c ****                 double temp = (xi*xi - yi*yi);
 1034              		.loc 1 295 23
 1035 0152 D7E90C23 		ldrd	r2, [r7, #48]
 1036 0156 D7E90C01 		ldrd	r0, [r7, #48]
 1037 015a FFF7FEFF 		bl	__aeabi_dmul
 1038 015e 0246     		mov	r2, r0
 1039 0160 0B46     		mov	r3, r1
 1040 0162 9246     		mov	r10, r2
 1041 0164 9B46     		mov	fp, r3
 295:Core/Src/main.c ****                 double temp = (xi*xi - yi*yi);
 1042              		.loc 1 295 31
 1043 0166 D7E90A23 		ldrd	r2, [r7, #40]
 1044 016a D7E90A01 		ldrd	r0, [r7, #40]
 1045 016e FFF7FEFF 		bl	__aeabi_dmul
 1046 0172 0246     		mov	r2, r0
 1047 0174 0B46     		mov	r3, r1
 295:Core/Src/main.c ****                 double temp = (xi*xi - yi*yi);
 1048              		.loc 1 295 27
 1049 0176 5046     		mov	r0, r10
 1050 0178 5946     		mov	r1, fp
 1051 017a FFF7FEFF 		bl	__aeabi_dadd
 1052 017e 0246     		mov	r2, r0
 1053 0180 0B46     		mov	r3, r1
 1054 0182 1046     		mov	r0, r2
 1055 0184 1946     		mov	r1, r3
 295:Core/Src/main.c ****                 double temp = (xi*xi - yi*yi);
 1056              		.loc 1 295 43
 1057 0186 4FF00002 		mov	r2, #0
 1058 018a 1C4B     		ldr	r3, .L38+16
 1059 018c FFF7FEFF 		bl	__aeabi_dcmple
 1060 0190 0346     		mov	r3, r0
 1061 0192 002B     		cmp	r3, #0
 1062 0194 03D0     		beq	.L31
 295:Core/Src/main.c ****                 double temp = (xi*xi - yi*yi);
 1063              		.loc 1 295 43 is_stmt 0 discriminator 1
 1064 0196 FA6B     		ldr	r2, [r7, #60]
 1065 0198 7B68     		ldr	r3, [r7, #4]
 1066 019a 9A42     		cmp	r2, r3
 1067 019c 9ADB     		blt	.L33
 1068              	.L31:
 300:Core/Src/main.c ****             }
 301:Core/Src/main.c ****             checksum += iteration;
 1069              		.loc 1 301 22 is_stmt 1
 1070 019e FB6B     		ldr	r3, [r7, #60]
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 25


 1071 01a0 DA17     		asrs	r2, r3, #31
 1072 01a2 1C46     		mov	r4, r3
 1073 01a4 1546     		mov	r5, r2
 1074 01a6 114B     		ldr	r3, .L38
 1075 01a8 D3E90023 		ldrd	r2, [r3]
 1076 01ac 14EB0208 		adds	r8, r4, r2
 1077 01b0 45EB0309 		adc	r9, r5, r3
 1078 01b4 0D4B     		ldr	r3, .L38
 1079 01b6 C3E90089 		strd	r8, [r3]
 1080              	.LBE16:
 289:Core/Src/main.c ****             double x0 = ((double)x/(double)width)*(3.5)-2.5;
 1081              		.loc 1 289 40 discriminator 2
 1082 01ba 3B6C     		ldr	r3, [r7, #64]
 1083 01bc 0133     		adds	r3, r3, #1
 1084 01be 3B64     		str	r3, [r7, #64]
 1085              	.L29:
 289:Core/Src/main.c ****             double x0 = ((double)x/(double)width)*(3.5)-2.5;
 1086              		.loc 1 289 27 discriminator 1
 1087 01c0 FA68     		ldr	r2, [r7, #12]
 1088 01c2 3B6C     		ldr	r3, [r7, #64]
 1089 01c4 9A42     		cmp	r2, r3
 1090 01c6 3FF72FAF 		bgt	.L34
 1091              	.LBE15:
 288:Core/Src/main.c ****         for (int x = 0; x <= width-1; x++) {
 1092              		.loc 1 288 37 discriminator 2
 1093 01ca 7B6C     		ldr	r3, [r7, #68]
 1094 01cc 0133     		adds	r3, r3, #1
 1095 01ce 7B64     		str	r3, [r7, #68]
 1096              	.L28:
 288:Core/Src/main.c ****         for (int x = 0; x <= width-1; x++) {
 1097              		.loc 1 288 23 discriminator 1
 1098 01d0 BA68     		ldr	r2, [r7, #8]
 1099 01d2 7B6C     		ldr	r3, [r7, #68]
 1100 01d4 9A42     		cmp	r2, r3
 1101 01d6 3FF724AF 		bgt	.L35
 1102              	.LBE14:
 302:Core/Src/main.c ****         }
 303:Core/Src/main.c ****     }
 304:Core/Src/main.c ****     return checksum;
 1103              		.loc 1 304 12
 1104 01da 044B     		ldr	r3, .L38
 1105 01dc D3E90023 		ldrd	r2, [r3]
 305:Core/Src/main.c **** }
 1106              		.loc 1 305 1
 1107 01e0 1046     		mov	r0, r2
 1108 01e2 1946     		mov	r1, r3
 1109 01e4 4837     		adds	r7, r7, #72
 1110              	.LCFI22:
 1111              		.cfi_def_cfa_offset 32
 1112 01e6 BD46     		mov	sp, r7
 1113              	.LCFI23:
 1114              		.cfi_def_cfa_register 13
 1115              		@ sp needed
 1116 01e8 BDE8B08F 		pop	{r4, r5, r7, r8, r9, r10, fp, pc}
 1117              	.L39:
 1118              		.align	2
 1119              	.L38:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 26


 1120 01ec 00000000 		.word	checksum
 1121 01f0 00000C40 		.word	1074528256
 1122 01f4 00000440 		.word	1074003968
 1123 01f8 0000F03F 		.word	1072693248
 1124 01fc 00001040 		.word	1074790400
 1125              		.cfi_endproc
 1126              	.LFE163:
 1128              		.global	__aeabi_f2d
 1129              		.section	.text.calculate_mandelbrot_float,"ax",%progbits
 1130              		.align	1
 1131              		.global	calculate_mandelbrot_float
 1132              		.syntax unified
 1133              		.thumb
 1134              		.thumb_func
 1136              	calculate_mandelbrot_float:
 1137              	.LFB164:
 306:Core/Src/main.c **** 
 307:Core/Src/main.c **** uint64_t calculate_mandelbrot_float(int width, int height, int max_iterations){
 1138              		.loc 1 307 79
 1139              		.cfi_startproc
 1140              		@ args = 0, pretend = 0, frame = 48
 1141              		@ frame_needed = 1, uses_anonymous_args = 0
 1142 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 1143              	.LCFI24:
 1144              		.cfi_def_cfa_offset 24
 1145              		.cfi_offset 4, -24
 1146              		.cfi_offset 5, -20
 1147              		.cfi_offset 7, -16
 1148              		.cfi_offset 8, -12
 1149              		.cfi_offset 9, -8
 1150              		.cfi_offset 14, -4
 1151 0004 8CB0     		sub	sp, sp, #48
 1152              	.LCFI25:
 1153              		.cfi_def_cfa_offset 72
 1154 0006 00AF     		add	r7, sp, #0
 1155              	.LCFI26:
 1156              		.cfi_def_cfa_register 7
 1157 0008 F860     		str	r0, [r7, #12]
 1158 000a B960     		str	r1, [r7, #8]
 1159 000c 7A60     		str	r2, [r7, #4]
 308:Core/Src/main.c ****     //uint64_t mandelbrot_sum = 0;
 309:Core/Src/main.c ****     //TODO: Complete the function implementation
 310:Core/Src/main.c ****     checksum = 0;
 1160              		.loc 1 310 14
 1161 000e 6149     		ldr	r1, .L51
 1162 0010 4FF00002 		mov	r2, #0
 1163 0014 4FF00003 		mov	r3, #0
 1164 0018 C1E90023 		strd	r2, [r1]
 1165              	.LBB18:
 311:Core/Src/main.c ****     for (int y = 0; y <= height-1; y++) {
 1166              		.loc 1 311 14
 1167 001c 0023     		movs	r3, #0
 1168 001e FB62     		str	r3, [r7, #44]
 1169              		.loc 1 311 5
 1170 0020 A9E0     		b	.L41
 1171              	.L48:
 1172              	.LBB19:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 27


 312:Core/Src/main.c ****         for (int x = 0; x <= width-1; x++) {
 1173              		.loc 1 312 18
 1174 0022 0023     		movs	r3, #0
 1175 0024 BB62     		str	r3, [r7, #40]
 1176              		.loc 1 312 9
 1177 0026 9EE0     		b	.L42
 1178              	.L47:
 1179              	.LBB20:
 313:Core/Src/main.c ****             float x0 = ((float)x/(float)width)*(3.5)-2.5;
 1180              		.loc 1 313 25
 1181 0028 BB6A     		ldr	r3, [r7, #40]
 1182 002a 07EE903A 		vmov	s15, r3	@ int
 1183 002e B8EEE77A 		vcvt.f32.s32	s14, s15
 1184              		.loc 1 313 34
 1185 0032 FB68     		ldr	r3, [r7, #12]
 1186 0034 07EE903A 		vmov	s15, r3	@ int
 1187 0038 F8EEE77A 		vcvt.f32.s32	s15, s15
 1188              		.loc 1 313 33
 1189 003c C7EE276A 		vdiv.f32	s13, s14, s15
 1190 0040 16EE900A 		vmov	r0, s13
 1191 0044 FFF7FEFF 		bl	__aeabi_f2d
 1192              		.loc 1 313 47
 1193 0048 4FF00002 		mov	r2, #0
 1194 004c 524B     		ldr	r3, .L51+4
 1195 004e FFF7FEFF 		bl	__aeabi_dmul
 1196 0052 0246     		mov	r2, r0
 1197 0054 0B46     		mov	r3, r1
 1198 0056 1046     		mov	r0, r2
 1199 0058 1946     		mov	r1, r3
 1200              		.loc 1 313 53
 1201 005a 4FF00002 		mov	r2, #0
 1202 005e 4F4B     		ldr	r3, .L51+8
 1203 0060 FFF7FEFF 		bl	__aeabi_dsub
 1204 0064 0246     		mov	r2, r0
 1205 0066 0B46     		mov	r3, r1
 1206              		.loc 1 313 19
 1207 0068 1046     		mov	r0, r2
 1208 006a 1946     		mov	r1, r3
 1209 006c FFF7FEFF 		bl	__aeabi_d2f
 1210 0070 0346     		mov	r3, r0	@ float
 1211 0072 BB61     		str	r3, [r7, #24]	@ float
 314:Core/Src/main.c ****             float y0 = ((float)y/(float)height)*(2.0)-1.0;
 1212              		.loc 1 314 25
 1213 0074 FB6A     		ldr	r3, [r7, #44]
 1214 0076 07EE903A 		vmov	s15, r3	@ int
 1215 007a B8EEE77A 		vcvt.f32.s32	s14, s15
 1216              		.loc 1 314 34
 1217 007e BB68     		ldr	r3, [r7, #8]
 1218 0080 07EE903A 		vmov	s15, r3	@ int
 1219 0084 F8EEE77A 		vcvt.f32.s32	s15, s15
 1220              		.loc 1 314 33
 1221 0088 C7EE276A 		vdiv.f32	s13, s14, s15
 1222 008c 16EE900A 		vmov	r0, s13
 1223 0090 FFF7FEFF 		bl	__aeabi_f2d
 1224              		.loc 1 314 48
 1225 0094 0246     		mov	r2, r0
 1226 0096 0B46     		mov	r3, r1
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 28


 1227 0098 FFF7FEFF 		bl	__aeabi_dadd
 1228 009c 0246     		mov	r2, r0
 1229 009e 0B46     		mov	r3, r1
 1230 00a0 1046     		mov	r0, r2
 1231 00a2 1946     		mov	r1, r3
 1232              		.loc 1 314 54
 1233 00a4 4FF00002 		mov	r2, #0
 1234 00a8 3D4B     		ldr	r3, .L51+12
 1235 00aa FFF7FEFF 		bl	__aeabi_dsub
 1236 00ae 0246     		mov	r2, r0
 1237 00b0 0B46     		mov	r3, r1
 1238              		.loc 1 314 19
 1239 00b2 1046     		mov	r0, r2
 1240 00b4 1946     		mov	r1, r3
 1241 00b6 FFF7FEFF 		bl	__aeabi_d2f
 1242 00ba 0346     		mov	r3, r0	@ float
 1243 00bc 7B61     		str	r3, [r7, #20]	@ float
 315:Core/Src/main.c ****             int iteration = 0;
 1244              		.loc 1 315 17
 1245 00be 0023     		movs	r3, #0
 1246 00c0 7B62     		str	r3, [r7, #36]
 316:Core/Src/main.c ****             float xi = 0;
 1247              		.loc 1 316 19
 1248 00c2 4FF00003 		mov	r3, #0
 1249 00c6 3B62     		str	r3, [r7, #32]	@ float
 317:Core/Src/main.c ****             float yi = 0;
 1250              		.loc 1 317 19
 1251 00c8 4FF00003 		mov	r3, #0
 1252 00cc FB61     		str	r3, [r7, #28]	@ float
 318:Core/Src/main.c ****             while ((xi*xi + yi*yi) <= (4) && iteration < max_iterations) {
 1253              		.loc 1 318 19
 1254 00ce 24E0     		b	.L43
 1255              	.L46:
 1256              	.LBB21:
 319:Core/Src/main.c ****                 float temp = (xi*xi - yi*yi);
 1257              		.loc 1 319 33
 1258 00d0 D7ED087A 		vldr.32	s15, [r7, #32]
 1259 00d4 27EEA77A 		vmul.f32	s14, s15, s15
 1260              		.loc 1 319 41
 1261 00d8 D7ED077A 		vldr.32	s15, [r7, #28]
 1262 00dc 67EEA77A 		vmul.f32	s15, s15, s15
 1263              		.loc 1 319 23
 1264 00e0 77EE677A 		vsub.f32	s15, s14, s15
 1265 00e4 C7ED047A 		vstr.32	s15, [r7, #16]
 320:Core/Src/main.c ****                 yi = (2*xi*yi)+y0;
 1266              		.loc 1 320 24
 1267 00e8 D7ED087A 		vldr.32	s15, [r7, #32]
 1268 00ec 37EEA77A 		vadd.f32	s14, s15, s15
 1269              		.loc 1 320 27
 1270 00f0 D7ED077A 		vldr.32	s15, [r7, #28]
 1271 00f4 67EE277A 		vmul.f32	s15, s14, s15
 1272              		.loc 1 320 20
 1273 00f8 97ED057A 		vldr.32	s14, [r7, #20]
 1274 00fc 77EE277A 		vadd.f32	s15, s14, s15
 1275 0100 C7ED077A 		vstr.32	s15, [r7, #28]
 321:Core/Src/main.c ****                 xi = temp+x0;
 1276              		.loc 1 321 20
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 29


 1277 0104 97ED047A 		vldr.32	s14, [r7, #16]
 1278 0108 D7ED067A 		vldr.32	s15, [r7, #24]
 1279 010c 77EE277A 		vadd.f32	s15, s14, s15
 1280 0110 C7ED087A 		vstr.32	s15, [r7, #32]
 322:Core/Src/main.c ****                 iteration++;
 1281              		.loc 1 322 26
 1282 0114 7B6A     		ldr	r3, [r7, #36]
 1283 0116 0133     		adds	r3, r3, #1
 1284 0118 7B62     		str	r3, [r7, #36]
 1285              	.L43:
 1286              	.LBE21:
 318:Core/Src/main.c ****                 float temp = (xi*xi - yi*yi);
 1287              		.loc 1 318 23
 1288 011a D7ED087A 		vldr.32	s15, [r7, #32]
 1289 011e 27EEA77A 		vmul.f32	s14, s15, s15
 318:Core/Src/main.c ****                 float temp = (xi*xi - yi*yi);
 1290              		.loc 1 318 31
 1291 0122 D7ED077A 		vldr.32	s15, [r7, #28]
 1292 0126 67EEA77A 		vmul.f32	s15, s15, s15
 318:Core/Src/main.c ****                 float temp = (xi*xi - yi*yi);
 1293              		.loc 1 318 27
 1294 012a 77EE277A 		vadd.f32	s15, s14, s15
 318:Core/Src/main.c ****                 float temp = (xi*xi - yi*yi);
 1295              		.loc 1 318 43
 1296 012e B1EE007A 		vmov.f32	s14, #4.0e+0
 1297 0132 F4EEC77A 		vcmpe.f32	s15, s14
 1298 0136 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1299 013a 03D8     		bhi	.L44
 318:Core/Src/main.c ****                 float temp = (xi*xi - yi*yi);
 1300              		.loc 1 318 43 is_stmt 0 discriminator 1
 1301 013c 7A6A     		ldr	r2, [r7, #36]
 1302 013e 7B68     		ldr	r3, [r7, #4]
 1303 0140 9A42     		cmp	r2, r3
 1304 0142 C5DB     		blt	.L46
 1305              	.L44:
 323:Core/Src/main.c ****             }
 324:Core/Src/main.c ****             checksum += iteration;
 1306              		.loc 1 324 22 is_stmt 1
 1307 0144 7B6A     		ldr	r3, [r7, #36]
 1308 0146 DA17     		asrs	r2, r3, #31
 1309 0148 1C46     		mov	r4, r3
 1310 014a 1546     		mov	r5, r2
 1311 014c 114B     		ldr	r3, .L51
 1312 014e D3E90023 		ldrd	r2, [r3]
 1313 0152 14EB0208 		adds	r8, r4, r2
 1314 0156 45EB0309 		adc	r9, r5, r3
 1315 015a 0E4B     		ldr	r3, .L51
 1316 015c C3E90089 		strd	r8, [r3]
 1317              	.LBE20:
 312:Core/Src/main.c ****             float x0 = ((float)x/(float)width)*(3.5)-2.5;
 1318              		.loc 1 312 40 discriminator 2
 1319 0160 BB6A     		ldr	r3, [r7, #40]
 1320 0162 0133     		adds	r3, r3, #1
 1321 0164 BB62     		str	r3, [r7, #40]
 1322              	.L42:
 312:Core/Src/main.c ****             float x0 = ((float)x/(float)width)*(3.5)-2.5;
 1323              		.loc 1 312 27 discriminator 1
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 30


 1324 0166 FA68     		ldr	r2, [r7, #12]
 1325 0168 BB6A     		ldr	r3, [r7, #40]
 1326 016a 9A42     		cmp	r2, r3
 1327 016c 3FF75CAF 		bgt	.L47
 1328              	.LBE19:
 311:Core/Src/main.c ****         for (int x = 0; x <= width-1; x++) {
 1329              		.loc 1 311 37 discriminator 2
 1330 0170 FB6A     		ldr	r3, [r7, #44]
 1331 0172 0133     		adds	r3, r3, #1
 1332 0174 FB62     		str	r3, [r7, #44]
 1333              	.L41:
 311:Core/Src/main.c ****         for (int x = 0; x <= width-1; x++) {
 1334              		.loc 1 311 23 discriminator 1
 1335 0176 BA68     		ldr	r2, [r7, #8]
 1336 0178 FB6A     		ldr	r3, [r7, #44]
 1337 017a 9A42     		cmp	r2, r3
 1338 017c 3FF751AF 		bgt	.L48
 1339              	.LBE18:
 325:Core/Src/main.c ****         }
 326:Core/Src/main.c ****     }
 327:Core/Src/main.c ****     return checksum;
 1340              		.loc 1 327 12
 1341 0180 044B     		ldr	r3, .L51
 1342 0182 D3E90023 		ldrd	r2, [r3]
 328:Core/Src/main.c **** }
 1343              		.loc 1 328 1
 1344 0186 1046     		mov	r0, r2
 1345 0188 1946     		mov	r1, r3
 1346 018a 3037     		adds	r7, r7, #48
 1347              	.LCFI27:
 1348              		.cfi_def_cfa_offset 24
 1349 018c BD46     		mov	sp, r7
 1350              	.LCFI28:
 1351              		.cfi_def_cfa_register 13
 1352              		@ sp needed
 1353 018e BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 1354              	.L52:
 1355 0192 00BF     		.align	2
 1356              	.L51:
 1357 0194 00000000 		.word	checksum
 1358 0198 00000C40 		.word	1074528256
 1359 019c 00000440 		.word	1074003968
 1360 01a0 0000F03F 		.word	1072693248
 1361              		.cfi_endproc
 1362              	.LFE164:
 1364              		.section	.text.DWT_Init,"ax",%progbits
 1365              		.align	1
 1366              		.global	DWT_Init
 1367              		.syntax unified
 1368              		.thumb
 1369              		.thumb_func
 1371              	DWT_Init:
 1372              	.LFB165:
 329:Core/Src/main.c **** 
 330:Core/Src/main.c **** void DWT_Init(void){
 1373              		.loc 1 330 20
 1374              		.cfi_startproc
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 31


 1375              		@ args = 0, pretend = 0, frame = 0
 1376              		@ frame_needed = 1, uses_anonymous_args = 0
 1377              		@ link register save eliminated.
 1378 0000 80B4     		push	{r7}
 1379              	.LCFI29:
 1380              		.cfi_def_cfa_offset 4
 1381              		.cfi_offset 7, -4
 1382 0002 00AF     		add	r7, sp, #0
 1383              	.LCFI30:
 1384              		.cfi_def_cfa_register 7
 331:Core/Src/main.c **** 	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 1385              		.loc 1 331 11
 1386 0004 094B     		ldr	r3, .L54
 1387 0006 DB68     		ldr	r3, [r3, #12]
 1388 0008 084A     		ldr	r2, .L54
 1389              		.loc 1 331 19
 1390 000a 43F08073 		orr	r3, r3, #16777216
 1391 000e D360     		str	r3, [r2, #12]
 332:Core/Src/main.c **** 	DWT->CYCCNT = 0;
 1392              		.loc 1 332 5
 1393 0010 074B     		ldr	r3, .L54+4
 1394              		.loc 1 332 14
 1395 0012 0022     		movs	r2, #0
 1396 0014 5A60     		str	r2, [r3, #4]
 333:Core/Src/main.c **** 	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 1397              		.loc 1 333 5
 1398 0016 064B     		ldr	r3, .L54+4
 1399 0018 1B68     		ldr	r3, [r3]
 1400 001a 054A     		ldr	r2, .L54+4
 1401              		.loc 1 333 12
 1402 001c 43F00103 		orr	r3, r3, #1
 1403 0020 1360     		str	r3, [r2]
 334:Core/Src/main.c **** }
 1404              		.loc 1 334 1
 1405 0022 00BF     		nop
 1406 0024 BD46     		mov	sp, r7
 1407              	.LCFI31:
 1408              		.cfi_def_cfa_register 13
 1409              		@ sp needed
 1410 0026 5DF8047B 		ldr	r7, [sp], #4
 1411              	.LCFI32:
 1412              		.cfi_restore 7
 1413              		.cfi_def_cfa_offset 0
 1414 002a 7047     		bx	lr
 1415              	.L55:
 1416              		.align	2
 1417              	.L54:
 1418 002c F0ED00E0 		.word	-536810000
 1419 0030 001000E0 		.word	-536866816
 1420              		.cfi_endproc
 1421              	.LFE165:
 1423              		.section	.text.Error_Handler,"ax",%progbits
 1424              		.align	1
 1425              		.global	Error_Handler
 1426              		.syntax unified
 1427              		.thumb
 1428              		.thumb_func
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 32


 1430              	Error_Handler:
 1431              	.LFB166:
 335:Core/Src/main.c **** /* USER CODE END 4 */
 336:Core/Src/main.c **** 
 337:Core/Src/main.c **** /**
 338:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 339:Core/Src/main.c ****   * @retval None
 340:Core/Src/main.c ****   */
 341:Core/Src/main.c **** void Error_Handler(void)
 342:Core/Src/main.c **** {
 1432              		.loc 1 342 1
 1433              		.cfi_startproc
 1434              		@ args = 0, pretend = 0, frame = 0
 1435              		@ frame_needed = 1, uses_anonymous_args = 0
 1436              		@ link register save eliminated.
 1437 0000 80B4     		push	{r7}
 1438              	.LCFI33:
 1439              		.cfi_def_cfa_offset 4
 1440              		.cfi_offset 7, -4
 1441 0002 00AF     		add	r7, sp, #0
 1442              	.LCFI34:
 1443              		.cfi_def_cfa_register 7
 1444              	.LBB22:
 1445              	.LBB23:
 1446              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 33


  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 34


  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 35


 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 36


 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 37


 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 38


 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 39


 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 40


 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 41


 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 42


 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 43


 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 44


 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 45


 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 46


 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 47


 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 48


 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 49


 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1447              		.loc 2 962 3
 1448              		.syntax unified
 1449              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1450 0004 72B6     		cpsid i
 1451              	@ 0 "" 2
 963:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1452              		.loc 2 963 1
 1453              		.thumb
 1454              		.syntax unified
 1455 0006 00BF     		nop
 1456              	.L57:
 1457              	.LBE23:
 1458              	.LBE22:
 343:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 344:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 345:Core/Src/main.c ****   __disable_irq();
 346:Core/Src/main.c ****   while (1)
 1459              		.loc 1 346 9
 1460 0008 00BF     		nop
 1461 000a FDE7     		b	.L57
 1462              		.cfi_endproc
 1463              	.LFE166:
 1465              		.text
 1466              	.Letext0:
 1467              		.file 3 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 1468              		.file 4 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 1469              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 1470              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 1471              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1472              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1473              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1474              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1475              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 50


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:25     .bss.start_time:00000000 start_time
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:22     .bss.start_time:00000000 $d
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:32     .bss.end_time:00000000 end_time
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:29     .bss.end_time:00000000 $d
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:39     .bss.execution_time:00000000 execution_time
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:36     .bss.execution_time:00000000 $d
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:46     .bss.checksum:00000000 checksum
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:43     .bss.checksum:00000000 $d
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:53     .bss.start_cycles:00000000 start_cycles
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:50     .bss.start_cycles:00000000 $d
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:60     .bss.end_cycles:00000000 end_cycles
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:57     .bss.end_cycles:00000000 $d
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:67     .bss.CPU_cycles:00000000 CPU_cycles
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:64     .bss.CPU_cycles:00000000 $d
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:74     .bss.throughput:00000000 throughput
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:71     .bss.throughput:00000000 $d
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:81     .data.init_width:00000000 init_width
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:78     .data.init_width:00000000 $d
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:88     .data.init_height:00000000 init_height
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:85     .data.init_height:00000000 $d
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:95     .data.size_array:00000000 size_array
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:92     .data.size_array:00000000 $d
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:106    .bss.checksum_array:00000000 checksum_array
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:103    .bss.checksum_array:00000000 $d
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:113    .bss.execution_time_array:00000000 execution_time_array
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:110    .bss.execution_time_array:00000000 $d
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:120    .bss.CPU_cycles_array:00000000 CPU_cycles_array
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:117    .bss.CPU_cycles_array:00000000 $d
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:127    .bss.CPU_time_array:00000000 CPU_time_array
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:124    .bss.CPU_time_array:00000000 $d
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:134    .bss.throughput_array:00000000 throughput_array
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:131    .bss.throughput_array:00000000 $d
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:140    .text.main:00000000 $t
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:146    .text.main:00000000 main
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:353    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:504    .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:1371   .text.DWT_Init:00000000 DWT_Init
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:621    .text.calculate_mandelbrot_fixed_point_arithmetic:00000000 calculate_mandelbrot_fixed_point_arithmetic
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:329    .text.main:00000138 $d
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:347    .text.SystemClock_Config:00000000 $t
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:1430   .text.Error_Handler:00000000 Error_Handler
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:493    .text.SystemClock_Config:000000d4 $d
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:499    .text.MX_GPIO_Init:00000000 $t
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:609    .text.MX_GPIO_Init:00000098 $d
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:615    .text.calculate_mandelbrot_fixed_point_arithmetic:00000000 $t
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:837    .text.calculate_mandelbrot_fixed_point_arithmetic:00000130 $d
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:847    .text.calculate_mandelbrot_double:00000000 $t
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:853    .text.calculate_mandelbrot_double:00000000 calculate_mandelbrot_double
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:1120   .text.calculate_mandelbrot_double:000001ec $d
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:1130   .text.calculate_mandelbrot_float:00000000 $t
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:1136   .text.calculate_mandelbrot_float:00000000 calculate_mandelbrot_float
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:1357   .text.calculate_mandelbrot_float:00000194 $d
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:1365   .text.DWT_Init:00000000 $t
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:1418   .text.DWT_Init:0000002c $d
C:\Users\User\AppData\Local\Temp\ccf1M7sf.s:1424   .text.Error_Handler:00000000 $t
ARM GAS  C:\Users\User\AppData\Local\Temp\ccf1M7sf.s 			page 51



UNDEFINED SYMBOLS
__aeabi_ui2d
__aeabi_ddiv
__aeabi_d2f
HAL_Init
HAL_GPIO_WritePin
HAL_GetTick
HAL_Delay
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_GPIO_Init
__aeabi_i2d
__aeabi_dmul
__aeabi_dsub
__aeabi_dadd
__aeabi_dcmple
__aeabi_f2d
